@TODO
Once item is done/tested, remove it from the list

LRM
-add section explaining the garbage collection
-explain array sentinels/integer limits

BUILTINS (ostdlib.c)
-rename file?
-implement constants if necessary
-anagram()
-readDict()
-map.destroy()
-map.contains()
-map.getLength()
-list.getLength() for chars
-listToString()
-subStrings()
-once everything has been tested, remove commented-out test code

SCANNER/PRASER
-make sure variable names/identifiers are correct
-how to get elements of a map/list
-translate map.destroy() etc into CALL(mapdestroy) etc

Garbage collection
-Test functionality further for the return type stuff

Standard Library (.olh)
-Write standard library functions
-Hook them into code we write via the compiler (how?)

Semantic Checker
-add builtin functions
-add builtin globals (dictionary, etc--have call to readdict initialize dictionary)
-type-check lists and maps
-type-check functions on objects (such as x.remove(y))
-assigning to a member of an object (x.y = z)
-calling a function on an object
-new object creation--board

Compiler (codegen.ml)
-add builtin constants (dictionary)
-add structs and other builtin types
-printing lists
-global variables
-SVmember (members of objects)
-SLiteralm (literal maps)
-SAssignm (member assigning)
-SAssign (variable assigning)
-SBinop for booleans (if needed?)
-SNewobj/SNewtobj (allocating space for new objects)
-SCallm (calling a function on an object)
-SFor
-SReturn
-SIf
-SForeach
-SBind (variable creation)
-build_ret for all return types


Test Suite (due 4/18):
-update the test script if necessary
-create output files for expected output of each positive test
-update README with instructions on how to run, what the tests are testing, etc

.
