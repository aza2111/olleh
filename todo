@TODO
Once item is done/tested, remove it from the list

Parser/Scanner/Ast
-pass globals to semantic checker

LRM
-add section explaining the garbage collection
-code out the olleh standard library
-how to compile olleh files with the standard library included? cat that to an intermediate file lol

BUILTINS (ostdlib.c)
-rename file
-implement constants if necessary
-anagram()
-readDict()
-map.destroy()
-map.contains()
-map.getLength()
-listToString()
-intToString()
-subStrings()
-once everything has been tested, remove commented-out test code

SCANNEr/PRASER
-make sure variable names/identifiers are correct

Garbage collection
-Test functionality further for the return type stuff

Standard Library (.olh)
-Write standard library functions
-Hook them into code we write via the compiler (how?)

Semantic Checker
-add builtin functions
-add builtin globals (seed, etc)
-type-check lists and maps
-type-check functions on objects (such as x.remove(y))
-assigning to a member of an object (x.y = z)
-calling a function on an object
-new object creation--pattern matching (ie fresh x(type) can be like list(string))
-exprs

Compiler (codegen.ml)
-add builtin constants (seed, dictionary)
-add structs and other builtin types (line 17/29)
-global variables
-SVmember (members of objects)
-SLiterall (literal lists)
-SLiteralm (literal maps)
-SAssignm (member assigning)
-SAssign (variable assigning)
-SBinop for non-integers (if needed)
-SNewobj/SNewtobj (allocating space for new objects)
-SCallm (calling a function on an object)
-SFor
-SReturn
-SIf
-SForeach
-build_ret for all return types


-testing:
code with reserved keywords/buildin functions redefined


.
