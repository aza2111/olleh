@TODO
Once item is done/tested, remove it from the list


Builtins
-getsetters possibly? add to semant, codegen, ostdlib if necessary
-mapget vs mapgeti
-exit in codegen (sexit->build call to exit)

Scanner/parser
-callm: expr dot variable NOT variable dot variable for gets, members, etc
-getsetters

Semantic Checker
-newobj (charmap, stringmap, charlist, listlist)
-scope of foreach variables
-what is allowed to be equality (int, bool, string)
-refactor if there's time
-add back in the dictionary stuff

Legitimate Test Suite
-build testing for all functionality
-build .out/.err files
-remove extraneous tests
-is it "not" or "!"
-test if/while with multiple statements in body

LRM
-variable scope (clarify)
-when you are not allowed to assign variables
-limits on string literals (can they have newlines? test the functionality), escaped quote char
-getsetters
-equality of reference

BUILTINS (ostdlib.c)
-change listToString to L...
-rename file?
-print map and listlist
-charmap, stringmap, and player structs
-implement constants (dictionary and letterScore)
-anagram()
-readDict()
-map.destroy() -> "Mapdestroy"
-map.contains()
-map.getLength()
-map.get()
-list.get()
-Initialize_dictionary()
-list.getLength() for chars and lists
-subStrings()


Standard Library (.olh)
-Write standard library functions
-Hook them into code we write via the compiler (how?) https://piazza.com/class/jaiu2g6r8py36c?cid=321

Compiler (codegen.ml)
-Attempting to access a key not in the map will result in an index-out-of-bounds error.
-add builtin constants (dictionary)
-add structs and other builtin types
-printing maps and listlists
-variable scope
-garbage collection for string return values
-SVmember (members of objects: change them from calls to getsetters, maybe even in parser/semant)
-SLiteralm (literal maps)
-SAssignm (member assigning)
-SNewobj/SNewtobj (allocating space for new objects)
-SNewlis of listlist
-SFor
-SForeach
-SBind (variable creation)
-add_terminal for all return types



.
